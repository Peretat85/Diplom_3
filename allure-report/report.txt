.venv1) PS C:\Users\peret\PycharmProjects\Diplom\Diplom_3> pytest tests/ --alluredir=allure_results
=================================================================================================== test session starts ===================================================================================================
platform win32 -- Python 3.10.8, pytest-8.3.5, pluggy-1.5.0
rootdir: C:\Users\peret\PycharmProjects\Diplom\Diplom_3
plugins: allure-pytest-2.14.1, Faker-37.1.0
collected 36 items

tests\test_feed_page.py .
DevTools listening on ws://127.0.0.1:60445/devtools/browser/0ea96ae9-32da-41dc-97fe-110b0994c8b0
[12172:16576:0518/183405.520:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.616 s
[12172:16576:0518/183405.675:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.616 s
[12172:16576:0518/183405.759:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.914 s for first_image_paint 0.616 s
[12172:16576:0518/183405.863:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.914 s for first_image_paint 0.616 s
[12172:16576:0518/183406.297:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.914 s for first_image_paint 0.616 s
[12172:16576:0518/183407.972:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.914 s for first_image_paint 0.616 s
[12172:16576:0518/183408.191:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.914 s for first_image_paint 0.616 s
[12172:16576:0518/183408.198:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.914 s for first_image_paint 0.616 s
[12172:16576:0518/183409.015:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.914 s for first_image_paint 0.616 s
..
DevTools listening on ws://127.0.0.1:60524/devtools/browser/f6b61bd5-90d3-4963-8695-317f4fcee003
E.
DevTools listening on ws://127.0.0.1:60605/devtools/browser/049d1a17-6d93-4e43-91c5-7aaf1eaa0e3a
F.
DevTools listening on ws://127.0.0.1:60697/devtools/browser/331a6c0b-72ac-4a52-9db1-4678bfbbb8da
.E
DevTools listening on ws://127.0.0.1:60769/devtools/browser/34a8f7bb-e030-4a42-ac93-40bda01ff422
[8052:18844:0518/183546.423:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.632 s
[8052:18844:0518/183546.576:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.863 s for first_image_paint 0.632 s
[8052:18844:0518/183546.688:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.863 s for first_image_paint 0.632 s
[8052:18844:0518/183547.335:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.863 s for first_image_paint 0.632 s
[8052:18844:0518/183549.110:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.863 s for first_image_paint 0.632 s
[8052:18844:0518/183549.225:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.863 s for first_image_paint 0.632 s
[8052:18844:0518/183549.336:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.863 s for first_image_paint 0.632 s
[8052:18844:0518/183549.486:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.863 s for first_image_paint 0.632 s
[8052:18844:0518/183549.496:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.863 s for first_image_paint 0.632 s
[8052:18844:0518/183550.289:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.863 s for first_image_paint 0.632 s
..
DevTools listening on ws://127.0.0.1:60858/devtools/browser/67d006c9-ddbf-4dfb-993d-e4c4c3d3c740
.                                                                                                                                                                                 [ 33%]
tests\test_main_page.py F
DevTools listening on ws://127.0.0.1:60934/devtools/browser/17ec947a-d7e6-402a-8286-f6ca80b399c5
[10660:19108:0518/183645.475:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.465 s
[10660:19108:0518/183645.639:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.683 s for first_image_paint 0.465 s
[10660:19108:0518/183645.739:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.683 s for first_image_paint 0.465 s
[10660:19108:0518/183645.945:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.683 s for first_image_paint 0.465 s
.F
DevTools listening on ws://127.0.0.1:61003/devtools/browser/14f3db27-5c43-4483-9395-cd25fea3f790
.F
DevTools listening on ws://127.0.0.1:61072/devtools/browser/a8b6f662-5a5b-47b7-bc8d-783bdce2cb01
.F
DevTools listening on ws://127.0.0.1:61138/devtools/browser/0ee48b06-2d65-4423-b7be-fa8921451b93
[20764:20836:0518/183738.614:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.589 s
[20764:20836:0518/183738.720:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.589 s
[20764:20836:0518/183738.781:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.836 s for first_image_paint 0.589 s
[20764:20836:0518/183738.882:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.836 s for first_image_paint 0.589 s
[20764:20836:0518/183739.450:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.836 s for first_image_paint 0.589 s
[20764:20836:0518/183740.335:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.836 s for first_image_paint 0.589 s
.F
DevTools listening on ws://127.0.0.1:61205/devtools/browser/d312248a-c94a-4f01-b41a-704ff782c26b
..
DevTools listening on ws://127.0.0.1:61278/devtools/browser/125353f5-ee77-4652-96be-a856a5c14e83
[9976:11312:0518/183820.810:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.628 s
[9976:11312:0518/183820.921:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.628 s
[9976:11312:0518/183820.967:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.859 s for first_image_paint 0.628 s
[9976:11312:0518/183821.067:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.859 s for first_image_paint 0.628 s
[9976:11312:0518/183821.646:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.859 s for first_image_paint 0.628 s
[9976:11312:0518/183822.767:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.859 s for first_image_paint 0.628 s
[9976:11312:0518/183822.876:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.859 s for first_image_paint 0.628 s
[9976:11312:0518/183823.089:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.859 s for first_image_paint 0.628 s
.                                                                                                                                                                                 [ 66%]
tests\test_profile_page.py .
DevTools listening on ws://127.0.0.1:61352/devtools/browser/a80a566f-ff0e-49da-828a-70ca466b4e13
..
DevTools listening on ws://127.0.0.1:61429/devtools/browser/aa96d4fe-660f-41f9-92a4-74e544a4b105
[20096:21140:0518/183906.053:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.697 s
[20096:21140:0518/183906.206:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.697 s
[20096:21140:0518/183906.209:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.945 s for first_image_paint 0.697 s
[20096:21140:0518/183906.309:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.945 s for first_image_paint 0.697 s
[20096:21140:0518/183906.859:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.945 s for first_image_paint 0.697 s
[20096:21140:0518/183908.364:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.945 s for first_image_paint 0.697 s
[20096:21140:0518/183908.482:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.945 s for first_image_paint 0.697 s
[20096:21140:0518/183909.038:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.945 s for first_image_paint 0.697 s
[20096:21140:0518/183909.124:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.945 s for first_image_paint 0.697 s
[20096:21140:0518/183909.223:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.945 s for first_image_paint 0.697 s
.[20096:21140:0518/183909.624:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.945 s for first_image_paint 0.697 s
[20096:21140:0518/183910.211:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.945 s for first_image_paint 0.697 s
.
DevTools listening on ws://127.0.0.1:61505/devtools/browser/77d54b0d-490d-4367-87aa-1b94ee7a893c
[9368:21536:0518/183928.106:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.625 s
[9368:21536:0518/183928.216:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.625 s
[9368:21536:0518/183928.263:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.855 s for first_image_paint 0.625 s
[9368:21536:0518/183928.365:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.855 s for first_image_paint 0.625 s
[9368:21536:0518/183928.867:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.855 s for first_image_paint 0.625 s
[9368:21536:0518/183929.865:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.855 s for first_image_paint 0.625 s
[9368:21536:0518/183929.968:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.855 s for first_image_paint 0.625 s
[9368:21536:0518/183930.201:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.855 s for first_image_paint 0.625 s
[9368:21536:0518/183930.291:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.855 s for first_image_paint 0.625 s
[9368:21536:0518/183930.402:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.855 s for first_image_paint 0.625 s
[9368:21536:0518/183930.419:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.855 s for first_image_paint 0.625 s
[9368:21536:0518/183930.868:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.855 s for first_image_paint 0.625 s
[9368:21536:0518/183931.485:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.855 s for first_image_paint 0.625 s
[9368:21536:0518/183931.694:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.855 s for first_image_paint 0.625 s
.                                                                                                                                                                                    [ 83%]
tests\test_recovery_password_page.py F
DevTools listening on ws://127.0.0.1:61579/devtools/browser/0bef911c-ad52-43f4-8e52-2146dca231bc
[21812:21800:0518/183948.969:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.736 s
[21812:21800:0518/183949.114:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.736 s
[21812:21800:0518/183949.117:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.95 s for first_image_paint 0.736 s
[21812:21800:0518/183949.228:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.95 s for first_image_paint 0.736 s
[21812:21800:0518/183949.730:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.95 s for first_image_paint 0.736 s
[21812:21800:0518/183951.066:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.95 s for first_image_paint 0.736 s
[21812:21800:0518/183951.074:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.95 s for first_image_paint 0.736 s
[21812:21800:0518/183951.239:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.95 s for first_image_paint 0.736 s
..
DevTools listening on ws://127.0.0.1:61647/devtools/browser/636b2e02-6290-4dbf-b811-fa16b07b5717
.F
DevTools listening on ws://127.0.0.1:61718/devtools/browser/40ca6ffa-67e8-436f-b179-2c5fee4add97
[18632:10972:0518/184032.138:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.65 s
[18632:10972:0518/184032.246:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint (unset) for first_image_paint 0.65 s
[18632:10972:0518/184032.293:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.882 s for first_image_paint 0.65 s
[18632:10972:0518/184032.401:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.882 s for first_image_paint 0.65 s
[18632:10972:0518/184032.920:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.882 s for first_image_paint 0.65 s
[18632:10972:0518/184034.021:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.882 s for first_image_paint 0.65 s
[18632:10972:0518/184034.041:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.882 s for first_image_paint 0.65 s
[18632:10972:0518/184034.184:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.882 s for first_image_paint 0.65 s
[18632:10972:0518/184034.536:ERROR:components\page_load_metrics\browser\page_load_metrics_update_dispatcher.cc:179] Invalid first_paint 0.882 s for first_image_paint 0.65 s
.                                                                                                                                                                          [100%]

========================================================================================================= ERRORS ==========================================================================================================
_________________________________________________________________________ ERROR at setup of TestFeedPage.test_order_details_modal_autoriz[chrome] _________________________________________________________________________

    @pytest.fixture()
    def user_setup():

        # Создаем пользователя
        faker = Faker()
        user_data = {
            "email": faker.email(),
            "password": "password",
            "name": "Test User"
        }

        response = requests.post(REGISTER_API_URL, json=user_data)
>       assert response.status_code != 403, "Такой пользователь уже существует"  # Проверка на существование пользователя
E       AssertionError: Такой пользователь уже существует
E       assert 403 != 403
E        +  where 403 = <Response [403]>.status_code

conftest.py:39: AssertionError
________________________________________________________________________ ERROR at setup of TestFeedPage.test_today_orders_count_increases[firefox] ________________________________________________________________________

    @pytest.fixture()
    def user_setup():

        # Создаем пользователя
        faker = Faker()
        user_data = {
            "email": faker.email(),
            "password": "password",
            "name": "Test User"
        }

        response = requests.post(REGISTER_API_URL, json=user_data)
>       assert response.status_code != 403, "Такой пользователь уже существует"  # Проверка на существование пользователя
E       AssertionError: Такой пользователь уже существует
E       assert 403 != 403
E        +  where 403 = <Response [403]>.status_code

conftest.py:39: AssertionError
--------------------------------------------------------------------------------------------------- Captured log setup ----------------------------------------------------------------------------------------------------
WARNING  selenium.webdriver.common.selenium_manager:selenium_manager.py:138 The geckodriver version (0.34.0) detected in PATH at C:\Users\peret\AppData\Local\Programs\Python\Python310\Scripts\geckodriver.exe might not be compatible with the detected firefox version (138.0.3.559); currently, geckodriver 0.36.0 is recommended for firefox 138.*, so it is advised to delete the driver in PATH and retry
======================================================================================================== FAILURES =========================================================================================================
___________________________________________________________________________________ TestFeedPage.test_order_in_history_and_feed[chrome] ___________________________________________________________________________________

self = <Diplom_3.tests.test_feed_page.TestFeedPage object at 0x000001E6CC3B31C0>
upload_token_to_session = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MjlmZTFmOWVkMjgwMDAxYjVmMTMyYiIsImlhdCI6MTc0NzU4MjQ5NSwiZXhwIjoxNzQ3NTgzNjk1fQ.LQ2TTDzH3O63ioMfQoVA5TL2aNH4OtFG_gShL1HtjUE'
driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="441946d1146fd4bc2da55020732dc785")>

    def test_order_in_history_and_feed(self, upload_token_to_session, driver):
        # 1. Переход на страницу Лента заказов - загрузка страницы
        feed_page = FeedPage(driver)
        feed_page.open_feed_page()
        # создаем заказ и запоминаем его номер
        order_id = create_order(upload_token_to_session)
        order_id_str = str(order_id)  # Приводим к строке


        # 2. Искать номер заказа в Ленте заказов (общей)
        feed_orders = feed_page.find_order_in_feed_orders()  # поменять логику метода
>       feed_orders_text = [order.text[2:] for order in feed_orders]

tests\test_feed_page.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\test_feed_page.py:60: in <listcomp>
    feed_orders_text = [order.text[2:] for order in feed_orders]
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:109: in text
    return self._execute(Command.GET_ELEMENT_TEXT)["value"]
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:572: in _execute
    return self._parent.execute(command, params)
.venv1\lib\site-packages\selenium\webdriver\remote\webdriver.py:448: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E6CC3E9E70>
response = {'status': 404, 'value': '{"value":{"error":"stale element reference","message":"stale element reference: stale elemen...CEA9BA79+4825]\\n\\tBaseThreadInitThunk [0x00007FFA0B7E7374+20]\\n\\tRtlUserThreadStart [0x00007FFA0D37CC91+33]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json

                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass

        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException

        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]

        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]

        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame
E         (Session info: chrome=136.0.7103.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception
E       Stacktrace:
E               GetHandleVerifier [0x00007FF7CEAACF65+75717]
E               GetHandleVerifier [0x00007FF7CEAACFC0+75808]
E               (No symbol) [0x00007FF7CE878F9A]
E               (No symbol) [0x00007FF7CE880998]
E               (No symbol) [0x00007FF7CE883A0C]
E               (No symbol) [0x00007FF7CE883ADF]
E               (No symbol) [0x00007FF7CE8C8F56]
E               (No symbol) [0x00007FF7CE8F737A]
E               (No symbol) [0x00007FF7CE8C1C46]
E               (No symbol) [0x00007FF7CE8F7590]
E               (No symbol) [0x00007FF7CE91F39C]
E               (No symbol) [0x00007FF7CE8F7153]
E               (No symbol) [0x00007FF7CE8C0421]
E               (No symbol) [0x00007FF7CE8C11B3]
E               GetHandleVerifier [0x00007FF7CEDAD74D+3223469]
E               GetHandleVerifier [0x00007FF7CEDA7CF2+3200338]
E               GetHandleVerifier [0x00007FF7CEDC5B23+3322755]
E               GetHandleVerifier [0x00007FF7CEAC6A3A+180890]
E               GetHandleVerifier [0x00007FF7CEACE13F+211359]
E               GetHandleVerifier [0x00007FF7CEAB52B4+109332]
E               GetHandleVerifier [0x00007FF7CEAB5462+109762]
E               GetHandleVerifier [0x00007FF7CEA9BA79+4825]
E               BaseThreadInitThunk [0x00007FFA0B7E7374+20]
E               RtlUserThreadStart [0x00007FFA0D37CC91+33]

.venv1\lib\site-packages\selenium\webdriver\remote\errorhandler.py:232: StaleElementReferenceException
___________________________________________________________________________________ TestMainPage.test_click_constructor_button[firefox] ___________________________________________________________________________________

self = <Diplom_3.tests.test_main_page.TestMainPage object at 0x000001E6CC3AC640>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session="6cf633a2-1f41-4ca3-97c4-3e9861043665")>

    def test_click_constructor_button(self, driver): # работает в GC
        # 1. Открыть главную страницу
        main_page = MainPage(driver)
        main_page.open_main_page()
        # 2. Нажать на Лента заказов
>       main_page.click_feed_button()

tests\test_main_page.py:15:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pages\main_page.py:30: in click_feed_button
    self.click_element(self.locators.FEED_BUTTON)
pages\base_page.py:17: in click_element
    WebDriverWait(self.driver, time).until(EC.element_to_be_clickable(locator)).click()
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:119: in click
    self._execute(Command.CLICK_ELEMENT)
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:572: in _execute
    return self._parent.execute(command, params)
.venv1\lib\site-packages\selenium\webdriver\remote\webdriver.py:448: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E6CC4F00D0>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"Element <a class=\\"AppHeader_heade...ys.mjs:354:29\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json

                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass

        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException

        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]

        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]

        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <a class="AppHeader_header__link__3D_hX" href="/feed"> is not clickable at point (408,44) because another element <div class="Modal_modal_overlay__x2ZCr"> obscures it
E       Stacktrace:
E       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8
E       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5
E       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:351:5
E       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11
E       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11
E       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:354:29
E       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31

.venv1\lib\site-packages\selenium\webdriver\remote\errorhandler.py:232: ElementClickInterceptedException
--------------------------------------------------------------------------------------------------- Captured log setup ----------------------------------------------------------------------------------------------------
WARNING  selenium.webdriver.common.selenium_manager:selenium_manager.py:138 The geckodriver version (0.34.0) detected in PATH at C:\Users\peret\AppData\Local\Programs\Python\Python310\Scripts\geckodriver.exe might not be compatible with the detected firefox version (138.0.3.559); currently, geckodriver 0.36.0 is recommended for firefox 138.*, so it is advised to delete the driver in PATH and retry
______________________________________________________________________________________ TestMainPage.test_click_feed_button[firefox] _______________________________________________________________________________________

self = <Diplom_3.tests.test_main_page.TestMainPage object at 0x000001E6CC3AFE20>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session="ae48151b-8b40-4f6c-8848-c2ff8fe98a77")>

    def test_click_feed_button(self, driver): # работает в GC
        # 1. Открыть главную страницу
        main_page = MainPage(driver)
        main_page.open_main_page()
        # 2. Нажать на Лента заказов
>       main_page.click_feed_button()

tests\test_main_page.py:29:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pages\main_page.py:30: in click_feed_button
    self.click_element(self.locators.FEED_BUTTON)
pages\base_page.py:17: in click_element
    WebDriverWait(self.driver, time).until(EC.element_to_be_clickable(locator)).click()
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:119: in click
    self._execute(Command.CLICK_ELEMENT)
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:572: in _execute
    return self._parent.execute(command, params)
.venv1\lib\site-packages\selenium\webdriver\remote\webdriver.py:448: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E6CB34E140>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"Element <a class=\\"AppHeader_heade...ys.mjs:354:29\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json

                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass

        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException

        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]

        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]

        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <a class="AppHeader_header__link__3D_hX" href="/feed"> is not clickable at point (408,44) because another element <div class="Modal_modal_overlay__x2ZCr"> obscures it
E       Stacktrace:
E       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8
E       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5
E       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:351:5
E       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11
E       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11
E       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:354:29
E       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31

.venv1\lib\site-packages\selenium\webdriver\remote\errorhandler.py:232: ElementClickInterceptedException
--------------------------------------------------------------------------------------------------- Captured log setup ----------------------------------------------------------------------------------------------------
WARNING  selenium.webdriver.common.selenium_manager:selenium_manager.py:138 The geckodriver version (0.34.0) detected in PATH at C:\Users\peret\AppData\Local\Programs\Python\Python310\Scripts\geckodriver.exe might not be compatible with the detected firefox version (138.0.3.559); currently, geckodriver 0.36.0 is recommended for firefox 138.*, so it is advised to delete the driver in PATH and retry
________________________________________________________________________________ TestMainPage.test_open_ingredient_details_modal[firefox] _________________________________________________________________________________

self = <Diplom_3.tests.test_main_page.TestMainPage object at 0x000001E6CC3AE3B0>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session="8cb4bc69-3262-45cd-82ed-a329a35ac2e5")>

    def test_open_ingredient_details_modal(self, driver): # работает в GC
        # 1. Открыть главную страницу
        main_page = MainPage(driver)
        main_page.open_main_page()
        # 2. Кликнуть на ингредиент
>       main_page.click_ingredient()

tests\test_main_page.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pages\main_page.py:35: in click_ingredient
    botton.click()
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:119: in click
    self._execute(Command.CLICK_ELEMENT)
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:572: in _execute
    return self._parent.execute(command, params)
.venv1\lib\site-packages\selenium\webdriver\remote\webdriver.py:448: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E6CC889EA0>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"Element <img class=\\"BurgerIngredi...ys.mjs:354:29\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json

                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass

        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException

        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]

        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]

        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <img class="BurgerIngredient_ingredient__image__3e-07 ml-4 mr-4" src="https://code.s3.yandex.net/react/code/bun-01.png"> is not clickable at point (288,397) because another element <div class="Modal_modal_overlay__x2ZCr"> obscures it
E       Stacktrace:
E       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8
E       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5
E       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:351:5
E       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11
E       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11
E       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:354:29
E       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31

.venv1\lib\site-packages\selenium\webdriver\remote\errorhandler.py:232: ElementClickInterceptedException
--------------------------------------------------------------------------------------------------- Captured log setup ----------------------------------------------------------------------------------------------------
WARNING  selenium.webdriver.common.selenium_manager:selenium_manager.py:138 The geckodriver version (0.34.0) detected in PATH at C:\Users\peret\AppData\Local\Programs\Python\Python310\Scripts\geckodriver.exe might not be compatible with the detected firefox version (138.0.3.559); currently, geckodriver 0.36.0 is recommended for firefox 138.*, so it is advised to delete the driver in PATH and retry
________________________________________________________________________________ TestMainPage.test_close_ingredient_details_modal[firefox] ________________________________________________________________________________

self = <Diplom_3.tests.test_main_page.TestMainPage object at 0x000001E6CC3AF1F0>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session="cbf30835-8607-4830-8c87-ee75d7489115")>

    def test_close_ingredient_details_modal(self, driver): # работает в GC
        # 1. Открыть главную страницу
        main_page = MainPage(driver)
        main_page.open_main_page()
        # 2. Кликнуть на ингредиент
>       main_page.click_ingredient()

tests\test_main_page.py:49:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pages\main_page.py:35: in click_ingredient
    botton.click()
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:119: in click
    self._execute(Command.CLICK_ELEMENT)
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:572: in _execute
    return self._parent.execute(command, params)
.venv1\lib\site-packages\selenium\webdriver\remote\webdriver.py:448: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E6CC884A60>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"Element <img class=\\"BurgerIngredi...ys.mjs:354:29\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json

                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass

        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException

        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]

        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]

        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <img class="BurgerIngredient_ingredient__image__3e-07 ml-4 mr-4" src="https://code.s3.yandex.net/react/code/bun-01.png"> is not clickable at point (288,397) because another element <div class="Modal_modal_overlay__x2ZCr"> obscures it
E       Stacktrace:
E       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8
E       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5
E       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:351:5
E       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11
E       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11
E       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:354:29
E       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31

.venv1\lib\site-packages\selenium\webdriver\remote\errorhandler.py:232: ElementClickInterceptedException
--------------------------------------------------------------------------------------------------- Captured log setup ----------------------------------------------------------------------------------------------------
WARNING  selenium.webdriver.common.selenium_manager:selenium_manager.py:138 The geckodriver version (0.34.0) detected in PATH at C:\Users\peret\AppData\Local\Programs\Python\Python310\Scripts\geckodriver.exe might not be compatible with the detected firefox version (138.0.3.559); currently, geckodriver 0.36.0 is recommended for firefox 138.*, so it is advised to delete the driver in PATH and retry
__________________________________________________________________________________ TestOrderMainPage.test_place_order_logged_in[firefox] __________________________________________________________________________________

self = <Diplom_3.tests.test_main_page.TestOrderMainPage object at 0x000001E6CC3AEA70>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session="ee1aaf67-2603-42fe-8116-9d848a04918d")>

    def test_place_order_logged_in(self, driver):
        # 1. на главную страницу
        main_page = MainPage(driver)
        main_page.open_main_page()
        # 2. добавить (перетянуть) ингредиенты в заказ
        main_page.drag_ingredient_to_order()
        # 3. убедиться, что у ингредиента цифра >0
        counter = main_page.find_counter()
>       assert counter.text == "2"
E       AssertionError: assert '0' == '2'
E
E         - 2
E         + 0

tests\test_main_page.py:68: AssertionError
--------------------------------------------------------------------------------------------------- Captured log setup ----------------------------------------------------------------------------------------------------
WARNING  selenium.webdriver.common.selenium_manager:selenium_manager.py:138 The geckodriver version (0.34.0) detected in PATH at C:\Users\peret\AppData\Local\Programs\Python\Python310\Scripts\geckodriver.exe might not be compatible with the detected firefox version (138.0.3.559); currently, geckodriver 0.36.0 is recommended for firefox 138.*, so it is advised to delete the driver in PATH and retry
_______________________________________________________________________________ TestPasswordReset.test_navigate_to_forgot_password[firefox] _______________________________________________________________________________

self = <Diplom_3.tests.test_recovery_password_page.TestPasswordReset object at 0x000001E6CC3EA470>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session="97c5b97b-2494-4751-9889-a62e548fff8f")>

    def test_navigate_to_forgot_password(self, driver): # + GH
        # 1. загрузка страницы входа
        login_page = LoginPage(driver)
        login_page.open_login_page()

        # 2. Нажать кнопку Восстановить пароль
>       login_page.click_forgot_password_link()

tests\test_recovery_password_page.py:16:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pages\recovery_password_page.py:22: in click_forgot_password_link
    self.click_element(self.locators.FORGOT_PASSWORD_LINK)
pages\base_page.py:17: in click_element
    WebDriverWait(self.driver, time).until(EC.element_to_be_clickable(locator)).click()
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:119: in click
    self._execute(Command.CLICK_ELEMENT)
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:572: in _execute
    return self._parent.execute(command, params)
.venv1\lib\site-packages\selenium\webdriver\remote\webdriver.py:448: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E6CC55B9A0>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"Element <a class=\\"Auth_link__1fOl...ys.mjs:354:29\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json

                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass

        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException

        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]

        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]

        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <a class="Auth_link__1fOlj" href="/forgot-password"> is not clickable at point (835,709) because another element <div class="Modal_modal_overlay__x2ZCr"> obscures it
E       Stacktrace:
E       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8
E       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5
E       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:351:5
E       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11
E       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11
E       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:354:29
E       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31

.venv1\lib\site-packages\selenium\webdriver\remote\errorhandler.py:232: ElementClickInterceptedException
--------------------------------------------------------------------------------------------------- Captured log setup ----------------------------------------------------------------------------------------------------
WARNING  selenium.webdriver.common.selenium_manager:selenium_manager.py:138 The geckodriver version (0.34.0) detected in PATH at C:\Users\peret\AppData\Local\Programs\Python\Python310\Scripts\geckodriver.exe might not be compatible with the detected firefox version (138.0.3.559); currently, geckodriver 0.36.0 is recommended for firefox 138.*, so it is advised to delete the driver in PATH and retry
__________________________________________________________________________________ TestPasswordReset.test_show_password_button[firefox] ___________________________________________________________________________________

self = <Diplom_3.tests.test_recovery_password_page.TestPasswordReset object at 0x000001E6CC3AEDA0>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session="02334443-9464-405c-9e77-be929b944407")>

    def test_show_password_button(self, driver): # придумать ожидания для Firefox
        # Предусловие1: выполнение перехода на страницу восстановления пароля
        forgot_password_page = ForgotPasswordPage(driver)
        forgot_password_page.open_forgot_password_page()
        # ждем загрузку кнопки Восстановить
        forgot_password_page.is_reset_button_displayed()
        # Предусловие2: ввести почту
        forgot_password_page.enter_email(EMAIL)
        # Предусловие3: нажать кнопку Восстановить - переход на страницу /eset-password
>       forgot_password_page.click_reset_button()

tests\test_recovery_password_page.py:46:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pages\recovery_password_page.py:75: in click_reset_button
    self.click_element(self.locators.RESET_BUTTON)
pages\base_page.py:17: in click_element
    WebDriverWait(self.driver, time).until(EC.element_to_be_clickable(locator)).click()
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:119: in click
    self._execute(Command.CLICK_ELEMENT)
.venv1\lib\site-packages\selenium\webdriver\remote\webelement.py:572: in _execute
    return self._parent.execute(command, params)
.venv1\lib\site-packages\selenium\webdriver\remote\webdriver.py:448: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E6CB373D30>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"Element <button class=\\"button_but...ys.mjs:354:29\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.

        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.

        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json

                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass

        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException

        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]

        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]

        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class="button_button__33qZ0 button_button_type_primary__1O7Bx button_button_size_medium__3zxIa"> is not clickable at point (764,461) because another element <div class="Modal_modal_overlay__x2ZCr"> obscures it
E       Stacktrace:
E       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8
E       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5
E       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:351:5
E       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11
E       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11
E       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:354:29
E       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31

.venv1\lib\site-packages\selenium\webdriver\remote\errorhandler.py:232: ElementClickInterceptedException
--------------------------------------------------------------------------------------------------- Captured log setup ----------------------------------------------------------------------------------------------------
WARNING  selenium.webdriver.common.selenium_manager:selenium_manager.py:138 The geckodriver version (0.34.0) detected in PATH at C:\Users\peret\AppData\Local\Programs\Python\Python310\Scripts\geckodriver.exe might not be compatible with the detected firefox version (138.0.3.559); currently, geckodriver 0.36.0 is recommended for firefox 138.*, so it is advised to delete the driver in PATH and retry
================================================================================================= short test summary info =================================================================================================
FAILED tests/test_feed_page.py::TestFeedPage::test_order_in_history_and_feed[chrome] - selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame
FAILED tests/test_main_page.py::TestMainPage::test_click_constructor_button[firefox] - selenium.common.exceptions.ElementClickInterceptedException: Message: Element <a class="AppHeader_header__link__3D_hX" href="/feed"> is not clickable at point (408,44) because another element <div class="Modal_modal...
FAILED tests/test_main_page.py::TestMainPage::test_click_feed_button[firefox] - selenium.common.exceptions.ElementClickInterceptedException: Message: Element <a class="AppHeader_header__link__3D_hX" href="/feed"> is not clickable at point (408,44) because another element <div class="Modal_modal...
FAILED tests/test_main_page.py::TestMainPage::test_open_ingredient_details_modal[firefox] - selenium.common.exceptions.ElementClickInterceptedException: Message: Element <img class="BurgerIngredient_ingredient__image__3e-07 ml-4 mr-4" src="https://code.s3.yandex.net/react/code/bun-01.png"> is not clickable...
FAILED tests/test_main_page.py::TestMainPage::test_close_ingredient_details_modal[firefox] - selenium.common.exceptions.ElementClickInterceptedException: Message: Element <img class="BurgerIngredient_ingredient__image__3FAILED tests/test_main_page.py::TestOrderMainPage::test_place_order_logged_in[firefox] - AssertionError: assert '0' == '2'
FAILED tests/test_recovery_password_page.py::TestPasswordReset::test_navigate_to_forgot_password[firefox] - selenium.common.exceptions.ElementClickInterceptedException: Message: Element <a class="Auth_link__1fOlj" href="/forgot-password"> is not clickable at point (835,709) because another element <div class="Modal_modal_...
FAILED tests/test_recovery_password_page.py::TestPasswordReset::test_show_password_button[firefox] - selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class="button_button__33qZ0 button_button_type_primary__1O7Bx button_button_size_medium__3zxIa"> is not clickable at point (764,4...
ERROR tests/test_feed_page.py::TestFeedPage::test_order_details_modal_autoriz[chrome] - AssertionError: Такой пользователь уже существует
ERROR tests/test_feed_page.py::TestFeedPage::test_today_orders_count_increases[firefox] - AssertionError: Такой пользователь уже существует
=================================================================================== 8 failed, 26 passed, 2 errors in 413.24s (0:06:53) ===